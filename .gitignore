# IGNORE NODE AND YARN STUFF
bundle.js
.env
.env.production

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
**/build/Release

**/.yarn/*
!**/.yarn/patches
!**/.yarn/plugins
!**/.yarn/releases
!**/.yarn/sdks
!**/.yarn/versions

**/node_modules
yarn-error.log

.DS_Store
.history

junit.xml

# This file is generated by the Smart Merge workflow
merge-conflict-resolution.patch

# The tarballs generated by "yarn pack" are never kept either
package.tgz

# The artifacts generated by "yarn release:all" are never kept
**/artifacts
**/dist

# Those files are meant to be local-only
**/packages/*/bundles

# Those folders are meant to contain the prepack build artifacts; we don't commit them
**/packages/*/lib/*

# Those packages are built inline and the artifacts must not be checked-in
**/packages/yarnpkg-libui/sources/**/*.js
**/packages/yarnpkg-libui/sources/**/*.d.ts

# Only contains the Webpack cache
**/packages/docusaurus/.yarn

# Used by /scripts/stable-versions-store.js
**/scripts/stable-versions-store.json

vscode-case-study

.idea

**/coverage
*.lcov

# IGNORE RUST AND CARGO STUFF
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb